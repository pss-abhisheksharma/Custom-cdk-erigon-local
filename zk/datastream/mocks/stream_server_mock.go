// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ledgerwatch/erigon/zk/datastream/server (interfaces: StreamServer)
//
// Generated by this command:
//
//	mockgen -typed=true -destination=../mocks/stream_server_mock.go -package=mocks . StreamServer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	datastreamer "github.com/0xPolygonHermez/zkevm-data-streamer/datastreamer"
	gomock "go.uber.org/mock/gomock"
)

// MockStreamServer is a mock of StreamServer interface.
type MockStreamServer struct {
	ctrl     *gomock.Controller
	recorder *MockStreamServerMockRecorder
}

// MockStreamServerMockRecorder is the mock recorder for MockStreamServer.
type MockStreamServerMockRecorder struct {
	mock *MockStreamServer
}

// NewMockStreamServer creates a new mock instance.
func NewMockStreamServer(ctrl *gomock.Controller) *MockStreamServer {
	mock := &MockStreamServer{ctrl: ctrl}
	mock.recorder = &MockStreamServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamServer) EXPECT() *MockStreamServerMockRecorder {
	return m.recorder
}

// AddStreamBookmark mocks base method.
func (m *MockStreamServer) AddStreamBookmark(arg0 []byte) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStreamBookmark", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddStreamBookmark indicates an expected call of AddStreamBookmark.
func (mr *MockStreamServerMockRecorder) AddStreamBookmark(arg0 any) *MockStreamServerAddStreamBookmarkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStreamBookmark", reflect.TypeOf((*MockStreamServer)(nil).AddStreamBookmark), arg0)
	return &MockStreamServerAddStreamBookmarkCall{Call: call}
}

// MockStreamServerAddStreamBookmarkCall wrap *gomock.Call
type MockStreamServerAddStreamBookmarkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStreamServerAddStreamBookmarkCall) Return(arg0 uint64, arg1 error) *MockStreamServerAddStreamBookmarkCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStreamServerAddStreamBookmarkCall) Do(f func([]byte) (uint64, error)) *MockStreamServerAddStreamBookmarkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStreamServerAddStreamBookmarkCall) DoAndReturn(f func([]byte) (uint64, error)) *MockStreamServerAddStreamBookmarkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddStreamEntry mocks base method.
func (m *MockStreamServer) AddStreamEntry(arg0 datastreamer.EntryType, arg1 []byte) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStreamEntry", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddStreamEntry indicates an expected call of AddStreamEntry.
func (mr *MockStreamServerMockRecorder) AddStreamEntry(arg0, arg1 any) *MockStreamServerAddStreamEntryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStreamEntry", reflect.TypeOf((*MockStreamServer)(nil).AddStreamEntry), arg0, arg1)
	return &MockStreamServerAddStreamEntryCall{Call: call}
}

// MockStreamServerAddStreamEntryCall wrap *gomock.Call
type MockStreamServerAddStreamEntryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStreamServerAddStreamEntryCall) Return(arg0 uint64, arg1 error) *MockStreamServerAddStreamEntryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStreamServerAddStreamEntryCall) Do(f func(datastreamer.EntryType, []byte) (uint64, error)) *MockStreamServerAddStreamEntryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStreamServerAddStreamEntryCall) DoAndReturn(f func(datastreamer.EntryType, []byte) (uint64, error)) *MockStreamServerAddStreamEntryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BookmarkPrintDump mocks base method.
func (m *MockStreamServer) BookmarkPrintDump() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BookmarkPrintDump")
}

// BookmarkPrintDump indicates an expected call of BookmarkPrintDump.
func (mr *MockStreamServerMockRecorder) BookmarkPrintDump() *MockStreamServerBookmarkPrintDumpCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookmarkPrintDump", reflect.TypeOf((*MockStreamServer)(nil).BookmarkPrintDump))
	return &MockStreamServerBookmarkPrintDumpCall{Call: call}
}

// MockStreamServerBookmarkPrintDumpCall wrap *gomock.Call
type MockStreamServerBookmarkPrintDumpCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStreamServerBookmarkPrintDumpCall) Return() *MockStreamServerBookmarkPrintDumpCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStreamServerBookmarkPrintDumpCall) Do(f func()) *MockStreamServerBookmarkPrintDumpCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStreamServerBookmarkPrintDumpCall) DoAndReturn(f func()) *MockStreamServerBookmarkPrintDumpCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CommitAtomicOp mocks base method.
func (m *MockStreamServer) CommitAtomicOp() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitAtomicOp")
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitAtomicOp indicates an expected call of CommitAtomicOp.
func (mr *MockStreamServerMockRecorder) CommitAtomicOp() *MockStreamServerCommitAtomicOpCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitAtomicOp", reflect.TypeOf((*MockStreamServer)(nil).CommitAtomicOp))
	return &MockStreamServerCommitAtomicOpCall{Call: call}
}

// MockStreamServerCommitAtomicOpCall wrap *gomock.Call
type MockStreamServerCommitAtomicOpCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStreamServerCommitAtomicOpCall) Return(arg0 error) *MockStreamServerCommitAtomicOpCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStreamServerCommitAtomicOpCall) Do(f func() error) *MockStreamServerCommitAtomicOpCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStreamServerCommitAtomicOpCall) DoAndReturn(f func() error) *MockStreamServerCommitAtomicOpCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBookmark mocks base method.
func (m *MockStreamServer) GetBookmark(arg0 []byte) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookmark", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookmark indicates an expected call of GetBookmark.
func (mr *MockStreamServerMockRecorder) GetBookmark(arg0 any) *MockStreamServerGetBookmarkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookmark", reflect.TypeOf((*MockStreamServer)(nil).GetBookmark), arg0)
	return &MockStreamServerGetBookmarkCall{Call: call}
}

// MockStreamServerGetBookmarkCall wrap *gomock.Call
type MockStreamServerGetBookmarkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStreamServerGetBookmarkCall) Return(arg0 uint64, arg1 error) *MockStreamServerGetBookmarkCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStreamServerGetBookmarkCall) Do(f func([]byte) (uint64, error)) *MockStreamServerGetBookmarkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStreamServerGetBookmarkCall) DoAndReturn(f func([]byte) (uint64, error)) *MockStreamServerGetBookmarkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDataBetweenBookmarks mocks base method.
func (m *MockStreamServer) GetDataBetweenBookmarks(arg0, arg1 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataBetweenBookmarks", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataBetweenBookmarks indicates an expected call of GetDataBetweenBookmarks.
func (mr *MockStreamServerMockRecorder) GetDataBetweenBookmarks(arg0, arg1 any) *MockStreamServerGetDataBetweenBookmarksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataBetweenBookmarks", reflect.TypeOf((*MockStreamServer)(nil).GetDataBetweenBookmarks), arg0, arg1)
	return &MockStreamServerGetDataBetweenBookmarksCall{Call: call}
}

// MockStreamServerGetDataBetweenBookmarksCall wrap *gomock.Call
type MockStreamServerGetDataBetweenBookmarksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStreamServerGetDataBetweenBookmarksCall) Return(arg0 []byte, arg1 error) *MockStreamServerGetDataBetweenBookmarksCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStreamServerGetDataBetweenBookmarksCall) Do(f func([]byte, []byte) ([]byte, error)) *MockStreamServerGetDataBetweenBookmarksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStreamServerGetDataBetweenBookmarksCall) DoAndReturn(f func([]byte, []byte) ([]byte, error)) *MockStreamServerGetDataBetweenBookmarksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetEntry mocks base method.
func (m *MockStreamServer) GetEntry(arg0 uint64) (datastreamer.FileEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntry", arg0)
	ret0, _ := ret[0].(datastreamer.FileEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntry indicates an expected call of GetEntry.
func (mr *MockStreamServerMockRecorder) GetEntry(arg0 any) *MockStreamServerGetEntryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntry", reflect.TypeOf((*MockStreamServer)(nil).GetEntry), arg0)
	return &MockStreamServerGetEntryCall{Call: call}
}

// MockStreamServerGetEntryCall wrap *gomock.Call
type MockStreamServerGetEntryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStreamServerGetEntryCall) Return(arg0 datastreamer.FileEntry, arg1 error) *MockStreamServerGetEntryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStreamServerGetEntryCall) Do(f func(uint64) (datastreamer.FileEntry, error)) *MockStreamServerGetEntryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStreamServerGetEntryCall) DoAndReturn(f func(uint64) (datastreamer.FileEntry, error)) *MockStreamServerGetEntryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFirstEventAfterBookmark mocks base method.
func (m *MockStreamServer) GetFirstEventAfterBookmark(arg0 []byte) (datastreamer.FileEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstEventAfterBookmark", arg0)
	ret0, _ := ret[0].(datastreamer.FileEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstEventAfterBookmark indicates an expected call of GetFirstEventAfterBookmark.
func (mr *MockStreamServerMockRecorder) GetFirstEventAfterBookmark(arg0 any) *MockStreamServerGetFirstEventAfterBookmarkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstEventAfterBookmark", reflect.TypeOf((*MockStreamServer)(nil).GetFirstEventAfterBookmark), arg0)
	return &MockStreamServerGetFirstEventAfterBookmarkCall{Call: call}
}

// MockStreamServerGetFirstEventAfterBookmarkCall wrap *gomock.Call
type MockStreamServerGetFirstEventAfterBookmarkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStreamServerGetFirstEventAfterBookmarkCall) Return(arg0 datastreamer.FileEntry, arg1 error) *MockStreamServerGetFirstEventAfterBookmarkCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStreamServerGetFirstEventAfterBookmarkCall) Do(f func([]byte) (datastreamer.FileEntry, error)) *MockStreamServerGetFirstEventAfterBookmarkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStreamServerGetFirstEventAfterBookmarkCall) DoAndReturn(f func([]byte) (datastreamer.FileEntry, error)) *MockStreamServerGetFirstEventAfterBookmarkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetHeader mocks base method.
func (m *MockStreamServer) GetHeader() datastreamer.HeaderEntry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader")
	ret0, _ := ret[0].(datastreamer.HeaderEntry)
	return ret0
}

// GetHeader indicates an expected call of GetHeader.
func (mr *MockStreamServerMockRecorder) GetHeader() *MockStreamServerGetHeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockStreamServer)(nil).GetHeader))
	return &MockStreamServerGetHeaderCall{Call: call}
}

// MockStreamServerGetHeaderCall wrap *gomock.Call
type MockStreamServerGetHeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStreamServerGetHeaderCall) Return(arg0 datastreamer.HeaderEntry) *MockStreamServerGetHeaderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStreamServerGetHeaderCall) Do(f func() datastreamer.HeaderEntry) *MockStreamServerGetHeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStreamServerGetHeaderCall) DoAndReturn(f func() datastreamer.HeaderEntry) *MockStreamServerGetHeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RollbackAtomicOp mocks base method.
func (m *MockStreamServer) RollbackAtomicOp() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackAtomicOp")
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackAtomicOp indicates an expected call of RollbackAtomicOp.
func (mr *MockStreamServerMockRecorder) RollbackAtomicOp() *MockStreamServerRollbackAtomicOpCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackAtomicOp", reflect.TypeOf((*MockStreamServer)(nil).RollbackAtomicOp))
	return &MockStreamServerRollbackAtomicOpCall{Call: call}
}

// MockStreamServerRollbackAtomicOpCall wrap *gomock.Call
type MockStreamServerRollbackAtomicOpCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStreamServerRollbackAtomicOpCall) Return(arg0 error) *MockStreamServerRollbackAtomicOpCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStreamServerRollbackAtomicOpCall) Do(f func() error) *MockStreamServerRollbackAtomicOpCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStreamServerRollbackAtomicOpCall) DoAndReturn(f func() error) *MockStreamServerRollbackAtomicOpCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Start mocks base method.
func (m *MockStreamServer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockStreamServerMockRecorder) Start() *MockStreamServerStartCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockStreamServer)(nil).Start))
	return &MockStreamServerStartCall{Call: call}
}

// MockStreamServerStartCall wrap *gomock.Call
type MockStreamServerStartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStreamServerStartCall) Return(arg0 error) *MockStreamServerStartCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStreamServerStartCall) Do(f func() error) *MockStreamServerStartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStreamServerStartCall) DoAndReturn(f func() error) *MockStreamServerStartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StartAtomicOp mocks base method.
func (m *MockStreamServer) StartAtomicOp() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAtomicOp")
	ret0, _ := ret[0].(error)
	return ret0
}

// StartAtomicOp indicates an expected call of StartAtomicOp.
func (mr *MockStreamServerMockRecorder) StartAtomicOp() *MockStreamServerStartAtomicOpCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAtomicOp", reflect.TypeOf((*MockStreamServer)(nil).StartAtomicOp))
	return &MockStreamServerStartAtomicOpCall{Call: call}
}

// MockStreamServerStartAtomicOpCall wrap *gomock.Call
type MockStreamServerStartAtomicOpCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStreamServerStartAtomicOpCall) Return(arg0 error) *MockStreamServerStartAtomicOpCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStreamServerStartAtomicOpCall) Do(f func() error) *MockStreamServerStartAtomicOpCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStreamServerStartAtomicOpCall) DoAndReturn(f func() error) *MockStreamServerStartAtomicOpCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TruncateFile mocks base method.
func (m *MockStreamServer) TruncateFile(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TruncateFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TruncateFile indicates an expected call of TruncateFile.
func (mr *MockStreamServerMockRecorder) TruncateFile(arg0 any) *MockStreamServerTruncateFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TruncateFile", reflect.TypeOf((*MockStreamServer)(nil).TruncateFile), arg0)
	return &MockStreamServerTruncateFileCall{Call: call}
}

// MockStreamServerTruncateFileCall wrap *gomock.Call
type MockStreamServerTruncateFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStreamServerTruncateFileCall) Return(arg0 error) *MockStreamServerTruncateFileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStreamServerTruncateFileCall) Do(f func(uint64) error) *MockStreamServerTruncateFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStreamServerTruncateFileCall) DoAndReturn(f func(uint64) error) *MockStreamServerTruncateFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateEntryData mocks base method.
func (m *MockStreamServer) UpdateEntryData(arg0 uint64, arg1 datastreamer.EntryType, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntryData", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEntryData indicates an expected call of UpdateEntryData.
func (mr *MockStreamServerMockRecorder) UpdateEntryData(arg0, arg1, arg2 any) *MockStreamServerUpdateEntryDataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntryData", reflect.TypeOf((*MockStreamServer)(nil).UpdateEntryData), arg0, arg1, arg2)
	return &MockStreamServerUpdateEntryDataCall{Call: call}
}

// MockStreamServerUpdateEntryDataCall wrap *gomock.Call
type MockStreamServerUpdateEntryDataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStreamServerUpdateEntryDataCall) Return(arg0 error) *MockStreamServerUpdateEntryDataCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStreamServerUpdateEntryDataCall) Do(f func(uint64, datastreamer.EntryType, []byte) error) *MockStreamServerUpdateEntryDataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStreamServerUpdateEntryDataCall) DoAndReturn(f func(uint64, datastreamer.EntryType, []byte) error) *MockStreamServerUpdateEntryDataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
