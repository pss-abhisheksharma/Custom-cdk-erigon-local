package vm

import (
	"bytes"
	"fmt"
	"math/big"
	"testing"

	libcommon "github.com/ledgerwatch/erigon-lib/common"
	"github.com/ledgerwatch/erigon/common"
	"github.com/ledgerwatch/erigon/smt/pkg/utils"
)

var (
	big0    = "0x0"
	big10   = "0xA"
	big8194 = "0x
)

func uint64To32Bytes(input int) []byte {
	bigInt := new(big.Int).SetUint64(uint64(input))
	bytes := bigInt.Bytes()
	result := make([]byte, 32)
	copy(result[32-len(bytes):], bytes)
	return result
}

func uint64ToDeterminedBytes(input *big.Int, length int) []byte {
	bytes := input.Bytes()
	result := make([]byte, length)
	copy(result[length-len(bytes):], bytes)
	return result
}

// This relies on PrecompiledContractsForkID13Durian.
func testPrecompiledZkevm(t *testing.T, addr string, test precompiledTest) {
	p := PrecompiledContractsForkID13Durian[libcommon.HexToAddress(addr)]
	in := libcommon.Hex2Bytes(test.Input)
	gas := p.RequiredGas(in)
	t.Run(fmt.Sprintf("%s-Gas=%d", test.Name, gas), func(t *testing.T) {
		t.Parallel()
		if res, _, err := RunPrecompiledContract(p, in, gas); err != nil {
			t.Error(err)
		} else if common.Bytes2Hex(res) != test.Expected {
			t.Errorf("Expected %v, got %v", test.Expected, common.Bytes2Hex(res))
		}
		if expGas := test.Gas; expGas != gas {
			t.Errorf("%v: gas wrong, expected %d, got %d", test.Name, expGas, gas)
		}
		// Verify that the precompile did not touch the input buffer
		exp := libcommon.Hex2Bytes(test.Input)
		if !bytes.Equal(in, exp) {
			t.Errorf("Precompiled %v modified input data", addr)
		}
	})
}

func testJsonZkevm(name, addr string, t *testing.T) {
	tests, err := loadJson(name)
	if err != nil {
		t.Fatal(err)
	}
	for _, test := range tests {
		testPrecompiledZkevm(t, addr, test)
	}
}

func Test_ModExpZkevm_Gas(t *testing.T) {
	modExp := bigModExp_zkevm{enabled: true, eip2565: true}

	cases := map[string]struct {
		lenBase    int
		lenExp     int
		lenMod     int
		base       string
		exp        string
		mod        string
		nonZeroGas bool
		revert     bool
	}{
		"simple test": {
			1,
			1,
			1,
			big10,
			big10,
			big10,
			true,
			false,
		},
		"0 mod - normal gas": {
			1,
			1,
			1,
			big10,
			big10,
			big0,
			true,
			false,
		},
		"base 0 - mod < 8192 - normal gas": {
			1,
			1,
			1,
			big0,
			big10,
			big10,
			true,
			false,
		},
		"base 0 - mod > 8192 - 0 gas": {
			1,
			1,
			1234,
			big0,
			big10,
			big8194,
			false,
			true,
		},
		"base over 8192 - 0 gas": {
			1234,
			1,
			1,
			big8194,
			big10,
			big10,
			false,
			true,
		},
		"exp over 8192 - 0 gas": {
			1,
			1234,
			1,
			big10,
			big8194,
			big10,
			false,
			true,
		},
		"mod over 8192 - 0 gas": {
			1,
			1,
			1234,
			big10,
			big10,
			big8194,
			false,
			true,
		},
		// tests beyond here are taken from the test vectors here https://github.com/0xPolygonHermez/zkevm-testvectors/blob/2b70027e11a427c15994713b41ef9b6794c2f3bb/tools-inputs/data/calldata/pre-modexp.json#L787
		"pre-modexp-test-case_0": {
			64,
			32,
			32,
			"0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000",
			"0x0000000000000000000000000000000000000000000000000000000000000001",
			"0x1111111111000000000000000000000000000000000000000000000000000000",
			true,
			false,
		},
		"pre-modexp_0": {
			32,
			32,
			32,
			"0x0000000000000000000000000000000000000000000000000000000000000007",
			"0x0000000000000000000000000000000000000000000000000000000000000008",
			"0x0000000000000000000000000000000000000000000000000000000000000009",
			true,
			false,
		},
		"pre-modexp_1": {
			64,
			32,
			32,
			"0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000",
			"0x0000000000000000000000000000000000000000000000000000000000000001",
			"0x0000000000000000000000000000000000000000000000000000000000000009",
			true,
			false,
		},
		"pre-modexp_2": {
			64,
			32,
			34,
			"0x00000000000000000000000000000000000000000000000000000000000001110000000000000000000000000000000000000000000000000000000000000000",
			"0x0000000000000000000000000000000000000000000000000000000000001000",
			"0x00000000000000000000000000000000000000000000000000000000000000ffffff",
			true,
			false,
		},
		"pre-modexp_3": {
			1025,
			32,
			32,
			big8194,
			"0x1000",
			"0x0000000000000000000000000000000000000000000000000000000000ffffff0000000000000000000000000000000000000000000000000000000000000000",
			false,
			true,
		},
		"pre-modexp_4": {
			32,
			1025,
			32,
			"0x0000000000000000000000000000000000000000000000000000000000000001",
			big8194,
			"0x0000000000000000000000000000000000000000000000000000000000000001",
			false,
			true,
		},
		"pre-modexp_5": {
			32,
			32,
			1025,
			"0xf000000000000000000000000000000000000000000000000000000000000000",
			"0xf000000000000000000000000000000000000000000000000000000000000010",
			big8194,
			false,
			true,
		},
		"pre-modexp_6": {
			32,
			32,
			32,
			"0xf000000000000000000000000000000000000000000000000000000000000000",
			"0xf000000000000000000000000000000000000000000000000000000000000010",
			"0xf000000000000000000000000000000000000000000000000000000000000055",
			true,
			false,
		},
		"pre-modexp_7": {
			32,
			32,
			32,
			"0x0000000000000000000000000000000000000000000000000000000000000020",
			"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
			"0xf000000000000000000000000000000000000000000000000000000000000055",
			true,
			false,
		},
		"pre-modexp_8": {
			128,
			32,
			128,
			"0x000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000002b32af000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004339f6e1061a",
			"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
			"0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001eb07e0ea000000000000000000000000000000000000000000000000000000056101669d",
			true,
			false,
		},
		"pre-modexp_9": {
			64,
			32,
			34,
			"0x10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			"0x0000000000000000000000000000000000000000000000000000000000000001",
			"0x00000000000000000000000000000000000000000000000000000000000000000009",
			true,
			false,
		},
		"pre-modexp_10": {
			64,
			32,
			34,
			"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111",
			"0x0000000000000000000000000000000000000000000000000000000000001000",
			"0x00000000000000000000000000000000000000000000000000000000000000ffffff",
			true,
			false,
		},
		"pre-modexp_11": {
			1,
			32,
			32,
			"0x3",
			"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2e",
			"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f",
			true,
			false,
		},
		"pre-modexp_12": {
			0,
			32,
			32,
			"0x0",
			"0x0000000000000000000000000000000000000000000000000000000000000001",
			"0x0000000000000000000000000000000000000000000000000000000000000009",
			true,
			false,
		},
	}

	for name, test := range cases {
		t.Run(name, func(t *testing.T) {
			input := make([]byte, 0)

			bigBase := utils.ConvertHexToBigInt(test.base)
			bigExp := utils.ConvertHexToBigInt(test.exp)
			bigMod := utils.ConvertHexToBigInt(test.mod)

			base := len(bigBase.Bytes())
			exp := len(bigExp.Bytes())
			mod := len(bigMod.Bytes())

			input = append(input, uint64To32Bytes(test.lenBase)...)
			input = append(input, uint64To32Bytes(test.lenExp)...)
			input = append(input, uint64To32Bytes(test.lenMod)...)
			input = append(input, uint64ToDeterminedBytes(bigBase, base)...)
			input = append(input, uint64ToDeterminedBytes(bigExp, exp)...)
			input = append(input, uint64ToDeterminedBytes(bigMod, mod)...)

			gas := modExp.RequiredGas(input)
			if test.nonZeroGas && gas == 0 {
				t.Errorf("Expected non-zero gas")
			} else if !test.nonZeroGas && gas != 0 {
				t.Errorf("Expected zero gas")
			}

			_, err := modExp.Run(input)
			if test.revert && err == nil {
				t.Errorf("Expected revert")
			} else if !test.revert && err != nil {
				t.Errorf("Unexpected revert: %s", err)
			}
		})
	}
}

func TestP256VerifyZkevm(t *testing.T) {
	testJsonZkevm("p256Verify", "0x0000000000000000000000000000000000000100", t)
}

// EIP2565 is enabled by default.
func TestBigModExpZkevm(t *testing.T) {
	testJsonZkevm("modexp_eip2565", "0x0000000000000000000000000000000000000005", t)
}
