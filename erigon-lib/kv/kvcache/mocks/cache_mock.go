// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ledgerwatch/erigon-lib/kv/kvcache (interfaces: Cache)
//
// Generated by this command:
//
//	mockgen -typed=true -destination=./mocks/cache_mock.go -package=mocks . Cache
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	remote "github.com/ledgerwatch/erigon-lib/gointerfaces/remote"
	kv "github.com/ledgerwatch/erigon-lib/kv"
	kvcache "github.com/ledgerwatch/erigon-lib/kv/kvcache"
	gomock "go.uber.org/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Len mocks base method.
func (m *MockCache) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockCacheMockRecorder) Len() *MockCacheLenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockCache)(nil).Len))
	return &MockCacheLenCall{Call: call}
}

// MockCacheLenCall wrap *gomock.Call
type MockCacheLenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCacheLenCall) Return(arg0 int) *MockCacheLenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCacheLenCall) Do(f func() int) *MockCacheLenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCacheLenCall) DoAndReturn(f func() int) *MockCacheLenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OnNewBlock mocks base method.
func (m *MockCache) OnNewBlock(arg0 *remote.StateChangeBatch) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnNewBlock", arg0)
}

// OnNewBlock indicates an expected call of OnNewBlock.
func (mr *MockCacheMockRecorder) OnNewBlock(arg0 any) *MockCacheOnNewBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnNewBlock", reflect.TypeOf((*MockCache)(nil).OnNewBlock), arg0)
	return &MockCacheOnNewBlockCall{Call: call}
}

// MockCacheOnNewBlockCall wrap *gomock.Call
type MockCacheOnNewBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCacheOnNewBlockCall) Return() *MockCacheOnNewBlockCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCacheOnNewBlockCall) Do(f func(*remote.StateChangeBatch)) *MockCacheOnNewBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCacheOnNewBlockCall) DoAndReturn(f func(*remote.StateChangeBatch)) *MockCacheOnNewBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ValidateCurrentRoot mocks base method.
func (m *MockCache) ValidateCurrentRoot(arg0 context.Context, arg1 kv.Tx) (*kvcache.CacheValidationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCurrentRoot", arg0, arg1)
	ret0, _ := ret[0].(*kvcache.CacheValidationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateCurrentRoot indicates an expected call of ValidateCurrentRoot.
func (mr *MockCacheMockRecorder) ValidateCurrentRoot(arg0, arg1 any) *MockCacheValidateCurrentRootCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCurrentRoot", reflect.TypeOf((*MockCache)(nil).ValidateCurrentRoot), arg0, arg1)
	return &MockCacheValidateCurrentRootCall{Call: call}
}

// MockCacheValidateCurrentRootCall wrap *gomock.Call
type MockCacheValidateCurrentRootCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCacheValidateCurrentRootCall) Return(arg0 *kvcache.CacheValidationResult, arg1 error) *MockCacheValidateCurrentRootCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCacheValidateCurrentRootCall) Do(f func(context.Context, kv.Tx) (*kvcache.CacheValidationResult, error)) *MockCacheValidateCurrentRootCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCacheValidateCurrentRootCall) DoAndReturn(f func(context.Context, kv.Tx) (*kvcache.CacheValidationResult, error)) *MockCacheValidateCurrentRootCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// View mocks base method.
func (m *MockCache) View(arg0 context.Context, arg1 kv.Tx) (kvcache.CacheView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "View", arg0, arg1)
	ret0, _ := ret[0].(kvcache.CacheView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// View indicates an expected call of View.
func (mr *MockCacheMockRecorder) View(arg0, arg1 any) *MockCacheViewCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "View", reflect.TypeOf((*MockCache)(nil).View), arg0, arg1)
	return &MockCacheViewCall{Call: call}
}

// MockCacheViewCall wrap *gomock.Call
type MockCacheViewCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCacheViewCall) Return(arg0 kvcache.CacheView, arg1 error) *MockCacheViewCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCacheViewCall) Do(f func(context.Context, kv.Tx) (kvcache.CacheView, error)) *MockCacheViewCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCacheViewCall) DoAndReturn(f func(context.Context, kv.Tx) (kvcache.CacheView, error)) *MockCacheViewCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
